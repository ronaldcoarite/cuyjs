<xs:schema
    attributeFormDefault="unqualified"
    elementFormDefault="qualified"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:group name="any-view">
        <xs:choice>
            <xs:element ref="View" />
            <xs:element ref="ImageView" />
            <xs:element ref="ImageButton" />
            <xs:element ref="TextView" />
            <xs:element ref="Button" />
            <xs:element ref="EditText" />
            <xs:element ref="ViewGroup" />
            <xs:element ref="FrameLayout" />
            <xs:element ref="RelativeLayout" />
            <xs:element ref="LinearLayout" />
            <xs:element ref="GridLayout" />
            <xs:element ref="ScrollView" />
            <xs:element ref="Camera" />
            <xs:element ref="Component" />
            <xs:element ref="LinkButton" />
            <xs:element ref="Form" />
            <xs:element ref="RadioButton" />
            <xs:element ref="RadioGroup" />
            <xs:element ref="WaitingView" />
            <xs:element ref="Spinner" />
        </xs:choice>
    </xs:group>
    <!-- atributos-->
    <xs:attribute name="positionSpinner">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="top"/>
                <xs:enumeration value="bottom"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="scaleType">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="fitXY"/>
                <xs:enumeration value="fitStart"/>
                <xs:enumeration value="fitCenter"/>
                <xs:enumeration value="center"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:simpleType name="bool">
        <xs:restriction base="xs:string">
            <xs:enumeration value="true"/>
            <xs:enumeration value="false"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="behavior">
        <xs:restriction base="xs:string">
            <xs:enumeration value="wrap_content"/>
            <xs:enumeration value="match_parent"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="dimension">
        <xs:union memberTypes="behavior">
          <xs:simpleType>
            <xs:restriction base="xs:token">
                <xs:pattern value="(\d*\.?\d+)\s?(px|dp|%|cm+)"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:union>
    </xs:simpleType>
    <xs:simpleType name="text_style">
        <xs:restriction base="xs:string">
            <xs:enumeration value="bold"/>
            <xs:enumeration value="italic"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:attribute name="layoutGravity">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="left"/>
                <xs:enumeration value="right"/>
                <xs:enumeration value="top"/>
                <xs:enumeration value="bottom"/>
                <xs:enumeration value="center"/>
                <xs:enumeration value="center_horizontal"/>
                <xs:enumeration value="center_vertical"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="orientation">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="vertical"/>
                <xs:enumeration value="horizontal"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="ellipsize">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="none"/>
                <xs:enumeration value="ellipsis"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="tooltip">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="none"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="visibility">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:enumeration value="gone"/>
                <xs:enumeration value="visible"/>
                <xs:enumeration value="invisible"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <!-- View -->
    <xs:element name="View" type="View">
        <xs:annotation>
            <xs:documentation>Elemento general de vista</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:complexType name="View">
        <!-- Atributos del view-->
        <xs:attribute type="xs:string" name="id" use="optional"/>
        <xs:attribute type="dimension" name="width" default="wrap_content"/>
        <xs:attribute type="dimension" name="height" default="wrap_content"/>
        <xs:attribute type="xs:string" name="background" use="optional"/>
        <xs:attribute type="xs:string" name="onClick" use="optional"/>
        <xs:attribute type="xs:string" name="cssClassList" use="optional"/>
        <xs:attribute type="xs:string" name="theme" use="optional"/>
        
        <xs:attribute ref="layoutGravity" use="optional"/>
        <xs:attribute ref="tooltip" use="optional"/>
        <xs:attribute ref="visibility" use="optional"/>
        
        <xs:attribute type="xs:string" name="margin" use="optional"/>
        <xs:attribute type="xs:string" name="marginTop" use="optional"/>
        <xs:attribute type="xs:string" name="marginLeft" use="optional"/>
        <xs:attribute type="xs:string" name="marginRight" use="optional"/>
        <xs:attribute type="xs:string" name="marginBottom" use="optional"/>
        
        <xs:attribute type="xs:string" name="padding" use="optional"/>
        <xs:attribute type="xs:string" name="paddingTop" use="optional"/>
        <xs:attribute type="xs:string" name="paddingLeft" use="optional"/>
        <xs:attribute type="xs:string" name="paddingRight" use="optional"/>
        <xs:attribute type="xs:string" name="paddingBottom" use="optional"/>
        
        <xs:attribute type="xs:string" name="weight" use="optional"/>
        
        <xs:attribute type="bool" name="alignParentLeft" use="optional"/>
        <xs:attribute type="bool" name="alignParentTop" use="optional"/>
        <xs:attribute type="bool" name="alignParentRight" use="optional"/>
        <xs:attribute type="bool" name="alignParentBottom" use="optional"/>
        <xs:attribute type="bool" name="centerHorizontal" use="optional"/>
        <xs:attribute type="bool" name="centerVertical" use="optional"/>
        <xs:attribute type="bool" name="centerInParent" use="optional"/>

        <xs:attribute type="bool" name="requiredInForm" use="optional"/>
        <xs:attribute type="xs:string" name="requiredMessage" use="optional"/>
        
        <xs:attribute type="xs:string" name="above" use="optional"/>
        <xs:attribute type="xs:string" name="below" use="optional"/>
        <xs:attribute type="xs:string" name="toRightOf" use="optional"/>
        <xs:attribute type="xs:string" name="toLeftOf" use="optional"/>
        
        <xs:attribute type="xs:string" name="style" use="optional"/>
        
        <xs:attribute type="xs:string" name="minHeight" use="optional"/>
        <xs:attribute type="xs:string" name="minWidth" use="optional"/>
    </xs:complexType>

    <!-- TextView -->
    <xs:element name="TextView" type="TextView" />
    <xs:complexType name="TextView">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                <xs:group minOccurs="0" maxOccurs="unbounded" ref="any-view" />
                <xs:attribute type="text_style" name="textStyle"/>
                <xs:attribute type="xs:string" name="text" use="optional"/>
                <xs:attribute type="xs:string" name="shadowColor" use="optional"/>
                <xs:attribute type="xs:integer" name="shadowDx" use="optional"/>
                <xs:attribute type="xs:integer" name="shadowDy" use="optional"/>
                <xs:attribute type="xs:integer" name="shadowRadius" use="optional"/>
                <xs:attribute type="xs:string" name="textColor" use="optional"/>
                <xs:attribute type="xs:string" name="textSize" use="optional"/>
                <xs:attribute type="xs:string" name="iconSize" use="optional"/>
                <xs:attribute type="bool" name="singleLine" use="optional"/>
                <xs:attribute ref="ellipsize" use="optional"/>
                <xs:attribute type="xs:string" name="drawableLeft" use="optional"/>
                <xs:attribute type="xs:string" name="drawableTop" use="optional"/>
                <xs:attribute type="xs:string" name="drawableRight" use="optional"/>
                <xs:attribute type="xs:string" name="drawableBottom" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- EditText -->
    <xs:element name="EditText" type="EditText" />
    <xs:complexType name="EditText">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                <xs:attribute type="bool" name="enabled" use="optional"/>
                <xs:attribute type="bool" name="singleLine" use="optional"/>
                <xs:attribute type="xs:integer" name="lines" use="optional"/>
                <xs:attribute type="xs:string" name="hint" use="optional"/>
                <xs:attribute type="xs:string" name="text" use="optional"/>
                <xs:attribute type="xs:integer" name="textSize" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Password -->
    <xs:element name="Password" type="Password" />
    <xs:complexType name="Password">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                <xs:attribute type="bool" name="enabled" use="optional"/>
                <xs:attribute type="xs:string" name="text" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Form -->
    <xs:element name="Form" type="Form" />
    <xs:complexType name="Form">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                <xs:group minOccurs="0" maxOccurs="unbounded" ref="any-view" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- ImageView -->
    <xs:element name="ImageView" type="ImageView" />
    <xs:complexType name="ImageView">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                <xs:attribute ref="scaleType" use="optional"/>
                <xs:attribute type="xs:string" name="src" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- ImageButton -->
    <xs:element name="ImageButton" type="ImageButton" />
    <xs:complexType name="ImageButton">
        <xs:complexContent mixed="false">
            <xs:extension base="ImageView">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- ProgressBar -->
    <xs:element name="ProgressBar" type="ProgressBar" />
    <xs:complexType name="ProgressBar">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- Button -->
    <xs:element name="Button" type="Button"/>
    <xs:complexType name="Button">
        <xs:complexContent mixed="false">
            <xs:extension base="TextView"/>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- LinkButton -->
    <xs:element name="LinkButton" type="LinkButton"/>
    <xs:complexType name="LinkButton">
        <xs:complexContent mixed="false">
            <xs:extension base="Button"/>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- ViewGroup -->
    <xs:element name="ViewGroup" type="ViewGroup"/>
    <xs:complexType name="ViewGroup">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                <xs:group minOccurs="0" maxOccurs="unbounded" ref="any-view" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- ScrollView -->
    <xs:element name="ScrollView" type="ScrollView"/>
    <xs:complexType name="ScrollView">
        <xs:complexContent mixed="false">
            <xs:extension base="View"/>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- FrameLayout -->
    <xs:element name="FrameLayout" type="FrameLayout"/>
    <xs:complexType name="FrameLayout">
        <xs:complexContent mixed="false">
            <xs:extension base="ViewGroup"/>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- LinearLayout -->
    <xs:element name="LinearLayout" type="LinearLayout"/>
    <xs:complexType name="LinearLayout">
        <xs:complexContent mixed="false">
            <xs:extension base="ViewGroup">
                <xs:attribute ref="orientation" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- RadioGroup -->
    <xs:element name="RadioGroup" type="RadioGroup"/>
    <xs:complexType name="RadioGroup">
        <xs:complexContent mixed="false">
            <xs:extension base="LinearLayout">
                <xs:attribute type="xs:string" name="groupName" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- GridLayout -->
    <xs:element name="GridLayout" type="GridLayout"/>
    <xs:complexType name="GridLayout">
        <xs:complexContent mixed="false">
            <xs:extension base="ViewGroup">
                <xs:attribute type="xs:integer" name="colums" use="required" />
                <xs:attribute type="xs:integer" name="horizontalSpace" use="optional"/>
                <xs:attribute type="xs:integer" name="verticalSpace" use="optional"/>
                <xs:attribute type="xs:integer" name="minWidthView" use="optional"/>
                <xs:attribute type="xs:integer" name="minHeightView" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- RelativeLayout -->
    <xs:element name="RelativeLayout" type="RelativeLayout"/>
    <xs:complexType name="RelativeLayout">
        <xs:complexContent mixed="false">
            <xs:extension base="ViewGroup"/>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- Camera -->
    <xs:element name="Camera" type="Camera" />
    <xs:complexType name="Camera">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- RadioButton -->
    <xs:element name="RadioButton" type="RadioButton" />
    <xs:complexType name="RadioButton">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                <xs:attribute type="xs:string" name="text" use="optional"/>
                <xs:attribute type="xs:string" name="radioGroup" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- Component -->
    <xs:element name="Component" type="Component" />
    <xs:complexType name="Component">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                <xs:attribute type="xs:string" name="layoutUrl" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Form -->
    <xs:element name="WaitingView" type="WaitingView" />
    <xs:complexType name="WaitingView">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <!-- Spinner -->
    <xs:element name="Spinner" type="Spinner" />
    <xs:complexType name="Spinner">
        <xs:complexContent mixed="false">
            <xs:extension base="View">
                <xs:attribute type="xs:string" name="text" use="required"/>
                <xs:attribute type="xs:string" name="onClickItemListener" use="optional"/>
                <xs:attribute type="bool" name="replaceableValue" use="optional"/>
                <xs:attribute ref="positionSpinner" use="optional"/>
                <!-- <xs:group minOccurs="0" maxOccurs="unbounded" ref="any-view" /> -->
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
</xs:schema>